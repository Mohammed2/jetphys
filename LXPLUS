In general it is expected that the user extracts jetphys and jecsys on a fitting working directory
on LXPLUS and symlinks CondFormats to jetphys, as usual.

Running locally on LXPLUS:

- Recommended to use a screen: start by writing 'screen', go away by ctrl+a+d and come back by 'screen -dr'.
- NOTE: screen -dr works as long as the user return to the same machine
- Set up ROOT and gcc, e.g.
source /afs/cern.ch/sw/lcg/contrib/gcc/4.9.3/x86_64-slc6/setup.sh
source /afs/cern.ch/sw/lcg/app/releases/ROOT/6.06.04/x86_64-slc6-gcc49-opt/root/bin/thisroot.sh
NOTE! gcc 5 do not trivially work currently. This should be fixed when ROOT 6.07 is released and installed on LXPLUS
- run: root -l mk_fillHistos.C

Running the dataset from B to E takes something like 12 hours.
Optionally one can select some subsets of the files and hadd the results later.
This seems to work decently enough.

Running on batch (slow and freezes atm.; not recommended):

This is slower than running locally, but parallellism helps. Here the alternative file
mk_fillHistosBatch.C is used. Due to the intricacies of modern ROOT, one cannot pass
command line arguments, but the current processor index is inserted manually to the
running script. The processor index is the same as the index of the file to be read,
defined in mk_fillHistosBatch.C. The user must provide the script lxplus_fillHistos.C
the current location and the name of the directory where the results are to be copied.

Finally, run

bsub -n N -q 2nw lxplus_fillHistos.sh N

N is the amount of processors and it must be passed both to the script and to bsub.
Different queues may be used. The script hadds the results after getting the results
done.

Yet another LXPLUS complication: the login gets old in 24h and the shell loses contact
with the lxplus forlders if precautions are not taken. The cure: 

- either run only short jobs and hadd

- or set kerberos to automatically renew the login:

  Persistent screen session on lxplus
  
  Setting up password-less kerberos token
  
  In order for the kerberos token to be refreshed automatically, it must be possible to do so without a password. Therefore, we create a keytab (similar to a private ssh key) on lxplus using the keytab utility. After starting it by typing ktutil, type the following three lines into the prompt and confirm the first two steps with your password.
  
  add_entry -password -p USERNAME@CERN.CH -k 1 -e arcfour-hmac-md5
  add_entry -password -p USERNAME@CERN.CH -k 1 -e aes256-cts
  wkt USERNAME.keytab
  and close the ktutil prompt with Ctrl+D. This will create a file called USERNAME.keytab in the current directory. It is strongly recommended to store this file in a directory to which only you have access as anyone who obtains a copy of this file can use it to obtain tokens in your name.
  
  Making use of the keytab
  
  This keytab file can now be used to obtain kerberos tokens without having to type a password:
  
  kinit -k -t USERNAME.keytab USERNAME@CERN.CH
  where -k tells kinit to use a keytab file and -t USERNAME.keytab where this keytab actually is.
  
  Using k5reauth to automatically refresh your kerberos token
  To start screen run:
  
  k5reauth -f -i 3600 -p USERNAME -k /path/to/USERNAME.keytab -- screen
  which will create a screen session whose kerberos token is refreshed automatically every 3600 seconds. When attaching back to the process, a simple
